import { HttpException, HttpStatus, Injectable } from '@nestjs/common';
import { Model } from 'mongoose';
import { InjectModel } from '@nestjs/mongoose';
import * as mongoose from 'mongoose';

import { User, UserDocument } from '../../cores/users/user.model';
import { Client, ClientDocument } from '../../cores/clients/entities/client.entity';
import { ClientPhone, ClientPhoneDocument } from '../../cores/clients/client-phones/entities/client-phone.entity';
import { ClientChannel, ClientChannelDocument } from '../../cores/clients/client-channels/entities/client-channel.entity';
import { Order, OrderDocument } from '../../cores/orders/entities/order.entity';
import { Pay, PayDocument } from '../../cores/orders/pays/entities/pay.entity';
import { Trash, TrashDocument } from '../trashs/entities/trash.entity';



@Injectable()
export class SupportService {
  constructor(
    @InjectModel(Client.name)         private clientDB: Model<ClientDocument>,
    @InjectModel(User.name)           private userDB: Model<UserDocument>,
    @InjectModel(ClientPhone.name)    private clientPhoneDB: Model<ClientPhoneDocument>,
    @InjectModel(ClientChannel.name)  private clientChannelDB: Model<ClientChannelDocument>,
    @InjectModel(Trash.name)          private trashDB: Model<TrashDocument>,
    @InjectModel(Order.name)          private orderDB: Model<OrderDocument>,
    @InjectModel(Pay.name)            private payDB: Model<PayDocument>,
  ) {
  }

  phoneStrToNumber(phone): number{
    let phoneNumber = phone.toString().replace(/^\s\s*/, '').replace(/\s\s*$/, '')
    if (phoneNumber.length > 9) {
      return Number(phoneNumber);
    }
    throw new HttpException({ message: `Ошибка - телефон №${phone} некорректен!` }, HttpStatus.CONFLICT);
  }
  async validateDesc(desc){
    if (!desc) {
      throw new HttpException({ message: `Необходимо указать причину удаления` }, HttpStatus.NOT_FOUND);
    }
    return desc
  }
  async validateCreator(idCreator: User){
    if ( !mongoose.isValidObjectId(idCreator) ) { throw new HttpException({ message: `ID удаляющего пользователя #${idCreator} не корректен!` }, HttpStatus.BAD_REQUEST)}
    let creator
    try { creator = await this.userDB.findById( idCreator ) } catch (e) { console.log(e) }
    if ( !creator ){ throw new HttpException({ message: `Удаляющий пользователь с ID #${idCreator} не найден` }, HttpStatus.NOT_FOUND)}
    return idCreator
  }
  async validateClient(idClient: Client){
    let client
    try { client = await this.clientDB.findById(idClient) } catch (e) { console.log(e) }
    if ( !client ) { throw new HttpException({ message: `Пользователь с ID #${idClient} не найден!` }, HttpStatus.NOT_FOUND);}
    return client
  }
  async validateClientChannel(idChannel: ClientChannel){
    if ( !mongoose.isValidObjectId(idChannel) ){  throw new HttpException({ message: `ID удаляемого канала #${idChannel} не корректен!` }, HttpStatus.BAD_REQUEST)}
    let channel
    try { channel = await this.clientChannelDB.findById(idChannel) } catch (e) { console.log(e) }
    if ( !channel ){ throw new HttpException({ message: `Удаляемый канал с ID #${idChannel} не найден` }, HttpStatus.NOT_FOUND)}
    return channel
  }
  async validateClientPhone(idPhone: ClientPhone) {
    if ( !mongoose.isValidObjectId(idPhone) ){  throw new HttpException({ message: `ID удаляемого телефона #${idPhone} не корректен!` }, HttpStatus.BAD_REQUEST)}
    let phone
    try { phone = await this.clientPhoneDB.findById(idPhone) } catch (e) { console.log(e) }
    if ( !phone ){ throw new HttpException({ message: `Удаляемый телефон с ID #${idPhone} не найден` }, HttpStatus.NOT_FOUND)}
    return phone
  }
  async validateOrder(idOrder: Order){
    if ( !mongoose.isValidObjectId(idOrder) ){  throw new HttpException({ message: `ID удаляемого заказа #${idOrder} не корректен!` }, HttpStatus.BAD_REQUEST)}
    let order
    try { order = await this.orderDB.findById(idOrder) } catch (e) { console.log(e) }
    if ( !order ){ throw new HttpException({ message: `Удаляемый заказ с ID #${idOrder} не найден` }, HttpStatus.NOT_FOUND)}
    return order
  }
  async validatePay(id: Pay) {
    if ( !mongoose.isValidObjectId(id) ){  throw new HttpException({ message: `ID удаляемой оплаты #${id} не корректен!` }, HttpStatus.BAD_REQUEST)}
    let pay
    try { pay = await this.payDB.findById(id) } catch (e) { console.log(e) }
    if ( !pay ){ throw new HttpException({ message: `Удаляемая оплата с ID #${id} не найдена` }, HttpStatus.NOT_FOUND)}
    return pay
  }

  //
}
